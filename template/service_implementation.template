{% set entity_name_pascalcase = entity.name | to_pascalcase %}
{% set entity_name = entity.name | to_lowercase %}
{% set injection = configs.config_params | selectattr("key", "eq","dependencyInjectionType") | list %}
{% if injection | length > 0 %}
    {% set injection_value = injection | first | attr("value") %}
{% endif %}
package {{ packagePath }}.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

{% if injection_value == 'property' %}
import org.springframework.beans.factory.annotation.Autowired;
{% endif %}
import org.springframework.stereotype.Service;

import {{ default_package }}.converter.{{entity_name_pascalcase}}To{{entity_name_pascalcase}}DtoConverter;
import {{ default_package }}.converter.{{entity_name_pascalcase}}DtoTo{{entity_name_pascalcase}}Converter;
import {{ default_package }}.repository.{{ entity_name_pascalcase}}Repository;
import {{ packagePath }}.model.{{ entity_name_pascalcase}};
import {{ packagePath }}.dto.{{ entity_name_pascalcase}}Dto;

@Service
public class {{ entity_name_pascalcase}}ServiceImpl implements {{ entity_name_pascalcase}}Service {

    {% if injection_value == 'constructor' %}
    private final {{entity_name_pascalcase}}Repository {{entity_name}}Repository;

    public {{ entity_name_pascalcase}}ServiceImpl({{ entity_name_pascalcase}}Repository {{ entity_name}}Repository) {
        this.{{entity_name}}Repository = {{entity_name}}Repository;
    }
    {% elif injection_value == 'property'  %}
    @Autowired
    private {{ entity_name_pascalcase}}Repository {{entity_name}}Repository;
    {% else %}
    {# setter #}
    private {{ entity_name_pascalcase}}Repository {{entity_name}}Repository;

    public void set{{entity_name_pascalcase}}Repository({{entity_name_pascalcase}}Repository {{entity_name}}Repository) {
        this.{{entity_name}}Repository = {{entity_name}}Repository;
    }
    {% endif %}

    private {{entity_name_pascalcase}}To{{entity_name_pascalcase}}DtoConverter {{entity_name}}To{{entity_name_pascalcase}}DtoConverter;

    private {{entity_name_pascalcase}}DtoTo{{entity_name_pascalcase}}Converter {{entity_name}}DtoTo{{entity_name_pascalcase}}Converter;

    @Override
    public List<{{ entity_name_pascalcase}}Dto> getAll() {
        List<{{ entity_name_pascalcase }}Dto> {{entity_name}}DtoList = new ArrayList<>();
        List<{{ entity_name_pascalcase }}> {{entity_name}}List = {{entity_name}}Repository.findAll();
        for({{ entity_name_pascalcase }} {{ entity_name }} : {{entity_name}}List}}) {
            {{entity_name}}DtoList.add({{entity_name}}To{{entity_name_pascalcase}}DtoConverter.convert({{entity_name}}));
        }
        return {{entity_name}}DtoList;
    }

    @Override
    public {{ entity_name_pascalcase}}Dto save({{ entity_name_pascalcase}}Dto {{entity_name}}Dto) {
        {{ entity_name_pascalcase}} {{entity_name}} = {{entity_name}}DtoTo{{entity_name_pascalcase}}.convert({{entity_name}}Dto);
        {{entity_name}}Repository.save({{entity_name}});
        return {{entity_name}}Dto;
    }

    @Override
    public {{ entity_name_pascalcase}}Dto getOne(Long id) {
        Optional<{{entity_name_pascalcase}}> {{entity_name}} = {{entity_name}}Repository.findById(id);
        {{ entity_name_pascalcase}}Dto {{entity_name}}Dto = {{entity_name}}To{{entity_name_pascalcase}}DtoConverter.convert({{entity_name}});
        return {{entity_name}}Dto;
    }

    @Override
    public void delete({{entity_name_pascalcase}}Dto {{entity_name}}Dto) {
        {{ entity_name_pascalcase}} {{entity_name}} = {{entity_name}}DtoTo{{entity_name_pascalcase}}.convert({{entity_name}}Dto);
        if({{entity_name}} != null) {
            {{entity_name}}Repository.delete({{entity_name}});
        }
    }

    @Override
    public void deleteById(Long id) {
        {{entity_name}}Repository.deleteById(id);
    }


}