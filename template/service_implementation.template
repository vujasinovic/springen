{% set entity_name_pascalcase = entity.name | to_pascalcase %}
{% set entity_name = entity.name | to_lowercase %}
{% set entity_name_dto_pascalcase = entity_name_pascalcase ~ 'Dto' %}
{% set entity_name_dto = entity_name ~ 'Dto' %}
{% set injection = configs.config_params | selectattr("key", "eq","dependencyInjectionType") | list %}
{% if injection | length > 0 %}
    {% set injection_value = injection | first | attr("value") %}
{% endif %}
{% set idTypeConfigParam = configs.config_params | config_param("idType") %}
{% set idType = "Long" %}
{% if idTypeConfigParam is not none %}
    {% set idType = idTypeConfigParam.value %}
{% endif %}
package {{ packagePath }}.service;

import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

{% if injection_value == 'property' %}
import org.springframework.beans.factory.annotation.Autowired;
{% endif %}
import org.springframework.stereotype.Service;

import {{ packagePath }}.converter.{{entity_name_pascalcase}}To{{entity_name_pascalcase}}DtoConverter;
import {{ packagePath }}.converter.{{entity_name_pascalcase}}DtoTo{{entity_name_pascalcase}}Converter;
import {{ packagePath }}.repository.{{ entity_name_pascalcase}}Repository;
import {{ packagePath }}.bom.{{ entity_name_pascalcase}};
import {{ packagePath }}.dto.{{ entity_name_dto_pascalcase}};

@Service
public class {{ entity_name_pascalcase}}ServiceImpl implements {{ entity_name_pascalcase}}Service {

    {% if injection_value == 'constructor' %}
    private final {{entity_name_pascalcase}}Repository {{entity_name}}Repository;

    private final {{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter {{entity_name}}To{{entity_name_dto_pascalcase}}Converter;

    private final {{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter {{entity_name_dto}}To{{entity_name_pascalcase}}Converter;

    public {{ entity_name_pascalcase}}ServiceImpl({{ entity_name_pascalcase}}Repository {{ entity_name}}Repository,{{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter {{entity_name}}To{{entity_name_dto_pascalcase}}Converter, {{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter {{entity_name_dto}}To{{entity_name_pascalcase}}Converter) {
        this.{{entity_name}}Repository = {{entity_name}}Repository;
        this.{{entity_name}}To{{entity_name_dto_pascalcase}}Converter = {{entity_name}}To{{entity_name_dto_pascalcase}}Converter;
        this.{{entity_name_dto}}To{{entity_name_pascalcase}}Converter = {{entity_name_dto}}To{{entity_name_pascalcase}}Converter;
    }

    {% elif injection_value == 'property'  %}
    @Autowired
    private {{ entity_name_pascalcase}}Repository {{entity_name}}Repository;

    @Autowired
    private {{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter {{entity_name}}To{{entity_name_dto_pascalcase}}Converter;

    @Autowired
    private {{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter {{entity_name_dto}}To{{entity_name_pascalcase}}Converter;

    {% else %}
    {# setter #}
    private {{ entity_name_pascalcase}}Repository {{entity_name}}Repository;

    private {{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter {{entity_name}}To{{entity_name_dto_pascalcase}}Converter;

    private {{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter {{entity_name_dto}}To{{entity_name_pascalcase}}Converter;

    @Autowired
    public void set{{entity_name_pascalcase}}Repository({{entity_name_pascalcase}}Repository {{entity_name}}Repository) {
        this.{{entity_name}}Repository = {{entity_name}}Repository;
    }

    @Autowired
    public void set{{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter({{entity_name_pascalcase}}To{{entity_name_dto_pascalcase}}Converter {{entity_name}}To{{entity_name_dto_pascalcase}}Converter) {
        this.{{entity_name}}To{{entity_name_dto_pascalcase}}Converter = {{entity_name}}To{{entity_name_dto_pascalcase}}Converter;
    }

    @Autowired
    public void set{{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter({{entity_name_dto_pascalcase}}To{{entity_name_pascalcase}}Converter {{entity_name_dto}}To{{entity_name_pascalcase}}Converter) {
        this.{{entity_name_dto}}To{{entity_name_pascalcase}}Converter = {{entity_name_dto}}To{{entity_name_pascalcase}}Converter;
    }

    {% endif %}

    @Override
    public List<{{ entity_name_dto_pascalcase}}> getAll() {
        List<{{ entity_name_dto_pascalcase }}> {{entity_name_dto}}List = new ArrayList<>();
        for({{ entity_name_pascalcase }} {{ entity_name }} : {{entity_name}}Repository.findAll()) {
            {{entity_name_dto}}List.add({{entity_name}}To{{entity_name_dto_pascalcase}}Converter.convert({{entity_name}}));
        }
        return {{entity_name_dto}}List;
    }

    @Override
    public {{ entity_name_dto_pascalcase}} save({{ entity_name_dto_pascalcase}} {{entity_name_dto}}) {
        {{ entity_name_pascalcase}} {{entity_name}} = {{entity_name}}Repository.save({{entity_name_dto}}To{{entity_name_pascalcase}}Converter.convert({{entity_name_dto}}));
        return {{entity_name}}To{{entity_name_dto_pascalcase}}Converter.convert({{entity_name}});
    }

    @Override
    public {{ entity_name_dto_pascalcase}} getOne({{idType}} id) {
        Optional<{{entity_name_pascalcase}}> {{entity_name}} = {{entity_name}}Repository.findById(id);
        {{ entity_name_dto_pascalcase}} {{entity_name_dto}} = null;
        if({{entity_name}}.isPresent()){
            {{entity_name_dto}} = {{entity_name}}To{{entity_name_dto_pascalcase}}Converter.convert({{entity_name}}.get());
        }
        return {{entity_name_dto}};
    }

    @Override
    public void delete({{entity_name_dto_pascalcase}} {{entity_name_dto}}) {
        {{ entity_name_pascalcase}} {{entity_name}} = {{entity_name_dto}}To{{entity_name_pascalcase}}Converter.convert({{entity_name_dto}});
        if({{entity_name}} != null) {
            {{entity_name}}Repository.delete({{entity_name}});
        }
    }

    @Override
    public void deleteById({{idType}} id) {
        {{entity_name}}Repository.deleteById(id);
    }


}